1. Everything in Python is an object.

2. Lambdas : Single Expression Functions
        No Statements, just one single expression

3. Catching all exceptions in a single exception is an anti-pattern

4. Diff b/w shallow copy and deep copy:
        A shallow copy means constructing a new collection object and then
    populating it with references to the child objects found in the original.
    Shallow copy ==> one level deep copy.
    Deep copy ==> Recursive deep
        A deep copy makes the copying process recursive. It means first constructing
    a new collection object and then recursively populating it
    with copies of the child objects found in the original.

5. Example of recursion -
    Condition to stop Recursion
    String - each char of string is in turn a string
    Deep Copy


6. Static methods are a way to namespace your methods
   Class methods can be used as factory methods to create your own custom
   class objects. You can use the cls variable to create new objects

12. Difference between sort and sorted
    sort works only on lists
    sorted works on any iterable
    Return value:
    sort --> None,  sorted --> list
    Functioning:
    sort --> In place sort, modifies the list
    sorted --> Does not modify the original list
    Sorting in python uses timSort

13. functools - higher order functions

14. Interesting dictionary expression:
    {True: 'yes', 1: 'no', 1.0: 'maybe'}
    {True: 'maybe'}
    a. True, 1, 1.0 all are equal
    b. When we add a new key value pair to the dictionary,
       python compares the new key with the existing key,
       if it is same, it doesnt replace the original
       dictionary. Instead it reassigns the new value
    c. Dictionaries are looked up from hash table
        each key gets a hash value assigned to it, so that
        the lookups are faster
    d. If two different keys have same hash value - hash collision
    e. Keys get overwritten on two conditions:
        If they are equal (__eq__ gives True)
        If they have same hash value (__hash__)

15. virtual env:
    isolated Python environment
    can separate Python dependencies by project and
    can select between different versions of the Python interpreter

16. Delegating work is an important advantage in OOPs
    It can be done in two ways:
    Inheritance vs Composition
    Inheritance - Class B inherits from class A
                - Class B "is a" class A
                - Liskov substitution principle
    Composition - Combines Classes of two types
                - Class B "has a" class A
    Ex - Horse is an Animal - Inheritance
       - Horse has a Tail - Composition
       - Here Tail is a Class too

17. Class is a template to produce objects
    Class is an object. As it is an object, it can be created from Metaclass
    All Classes in python are created from Metaclass type
    class C:pass <==> type("C", (), {})
    class FooChild(Foo):pass <==> type('FooChild', (Foo,), {})
    class C:x=1 <==> type("C", (), {"x":1})
    type(class_name,(class_parents),{class_attributes})

    type --> metaclass --> class factory

18. Abstract Base Class -
    A base class which is the template to ensure classes are created with
    the needed methods
    Mixins -
    Multiple inheritance which allows to mix-in diff properties

